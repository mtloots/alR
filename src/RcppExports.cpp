// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// alE
List alE(NumericVector x, NumericVector q1, NumericVector q2, bool dc, double type);
RcppExport SEXP alR_alE(SEXP xSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP dcSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< double >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(alE(x, q1, q2, dc, type));
    return rcpp_result_gen;
END_RCPP
}
// alEfitdist
NumericMatrix alEfitdist(NumericVector x, NumericVector q1, NumericVector q2, bool dc, double type, int bootstraps);
RcppExport SEXP alR_alEfitdist(SEXP xSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP dcSEXP, SEXP typeSEXP, SEXP bootstrapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< double >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type bootstraps(bootstrapsSEXP);
    rcpp_result_gen = Rcpp::wrap(alEfitdist(x, q1, q2, dc, type, bootstraps));
    return rcpp_result_gen;
END_RCPP
}
// alEdist
NumericMatrix alEdist(int n, int bootstraps, double mu, double sigma, NumericVector q1, NumericVector q2, bool quantile, bool dc, double type);
RcppExport SEXP alR_alEdist(SEXP nSEXP, SEXP bootstrapsSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP, SEXP dcSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type bootstraps(bootstrapsSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< bool >::type dc(dcSEXP);
    Rcpp::traits::input_parameter< double >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(alEdist(n, bootstraps, mu, sigma, q1, q2, quantile, dc, type));
    return rcpp_result_gen;
END_RCPP
}
// alrKDE
double alrKDE(const arma::vec& beta, const arma::mat& gamma, const arma::vec& aly, const arma::vec& q1, const arma::vec& q2, const int& type);
RcppExport SEXP alR_alrKDE(SEXP betaSEXP, SEXP gammaSEXP, SEXP alySEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type aly(alySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(alrKDE(beta, gamma, aly, q1, q2, type));
    return rcpp_result_gen;
END_RCPP
}
// Silverman
double Silverman(NumericVector x);
RcppExport SEXP alR_Silverman(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Silverman(x));
    return rcpp_result_gen;
END_RCPP
}
// Silverman2
double Silverman2(NumericVector x);
RcppExport SEXP alR_Silverman2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Silverman2(x));
    return rcpp_result_gen;
END_RCPP
}
// bw
double bw(NumericVector x, double type);
RcppExport SEXP alR_bw(SEXP xSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(bw(x, type));
    return rcpp_result_gen;
END_RCPP
}
// GaussInt
List GaussInt(double mu, double sigma, double q1, double q2, bool quantile);
RcppExport SEXP alR_GaussInt(SEXP muSEXP, SEXP sigmaSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussInt(mu, sigma, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// GaussInt2
NumericVector GaussInt2(double mu, double sigma, NumericVector q1, NumericVector q2, bool quantile);
RcppExport SEXP alR_GaussInt2(SEXP muSEXP, SEXP sigmaSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussInt2(mu, sigma, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// pkappa4
double pkappa4(double x, double mu, double sigma, double h, double k);
RcppExport SEXP alR_pkappa4(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(pkappa4(x, mu, sigma, h, k));
    return rcpp_result_gen;
END_RCPP
}
// dkappa4
double dkappa4(double x, double mu, double sigma, double h, double k);
RcppExport SEXP alR_dkappa4(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(dkappa4(x, mu, sigma, h, k));
    return rcpp_result_gen;
END_RCPP
}
// qkappa4
double qkappa4(double x, double mu, double sigma, double h, double k);
RcppExport SEXP alR_qkappa4(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(qkappa4(x, mu, sigma, h, k));
    return rcpp_result_gen;
END_RCPP
}
// rkappa4
NumericVector rkappa4(int n, double mu, double sigma, double h, double k);
RcppExport SEXP alR_rkappa4(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rkappa4(n, mu, sigma, h, k));
    return rcpp_result_gen;
END_RCPP
}
// dddkappa4
double dddkappa4(double x, double mu, double sigma, double h, double k);
RcppExport SEXP alR_dddkappa4(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(dddkappa4(x, mu, sigma, h, k));
    return rcpp_result_gen;
END_RCPP
}
// kappa4cond
double kappa4cond(double mu, double sigma, double h, double k);
RcppExport SEXP alR_kappa4cond(SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4cond(mu, sigma, h, k));
    return rcpp_result_gen;
END_RCPP
}
// kappa4tc
List kappa4tc(double h, double mu, double sigma);
RcppExport SEXP alR_kappa4tc(SEXP hSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4tc(h, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// kappa4Int
List kappa4Int(double mu, double sigma, double h, double k, double tau, double q1, double q2, bool quantile);
RcppExport SEXP alR_kappa4Int(SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP, SEXP tauSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4Int(mu, sigma, h, k, tau, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kappa4Int2
NumericVector kappa4Int2(double mu, double sigma, double h, double k, double tau, NumericVector q1, NumericVector q2, bool quantile);
RcppExport SEXP alR_kappa4Int2(SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP kSEXP, SEXP tauSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4Int2(mu, sigma, h, k, tau, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kappa4IntApprox
double kappa4IntApprox(NumericVector x, NumericVector y, double q1, double q2, bool quantile);
RcppExport SEXP alR_kappa4IntApprox(SEXP xSEXP, SEXP ySEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4IntApprox(x, y, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kappa4IntApprox2
NumericVector kappa4IntApprox2(NumericVector x, NumericVector y, NumericVector q1, NumericVector q2, bool quantile);
RcppExport SEXP alR_kappa4IntApprox2(SEXP xSEXP, SEXP ySEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4IntApprox2(x, y, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kappa4NLSobj
double kappa4NLSobj(NumericVector parms, NumericVector xvec, NumericVector y, double x_min, double x_max);
RcppExport SEXP alR_kappa4NLSobj(SEXP parmsSEXP, SEXP xvecSEXP, SEXP ySEXP, SEXP x_minSEXP, SEXP x_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4NLSobj(parms, xvec, y, x_min, x_max));
    return rcpp_result_gen;
END_RCPP
}
// kappa4NLScon
NumericVector kappa4NLScon(NumericVector parms, NumericVector xvec, NumericVector y, double x_min, double x_max);
RcppExport SEXP alR_kappa4NLScon(SEXP parmsSEXP, SEXP xvecSEXP, SEXP ySEXP, SEXP x_minSEXP, SEXP x_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4NLScon(parms, xvec, y, x_min, x_max));
    return rcpp_result_gen;
END_RCPP
}
// kappa4NLShin
NumericVector kappa4NLShin(NumericVector parms, NumericVector xvec, NumericVector y, double x_min, double x_max);
RcppExport SEXP alR_kappa4NLShin(SEXP parmsSEXP, SEXP xvecSEXP, SEXP ySEXP, SEXP x_minSEXP, SEXP x_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4NLShin(parms, xvec, y, x_min, x_max));
    return rcpp_result_gen;
END_RCPP
}
// kappa4NLSheq
NumericVector kappa4NLSheq(NumericVector parms, NumericVector xvec, NumericVector y, double x_min, double x_max);
RcppExport SEXP alR_kappa4NLSheq(SEXP parmsSEXP, SEXP xvecSEXP, SEXP ySEXP, SEXP x_minSEXP, SEXP x_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4NLSheq(parms, xvec, y, x_min, x_max));
    return rcpp_result_gen;
END_RCPP
}
// kappa4ALobj
double kappa4ALobj(NumericVector parms, NumericVector al_samp, double x_min, double x_max, NumericVector q1, NumericVector q2);
RcppExport SEXP alR_kappa4ALobj(SEXP parmsSEXP, SEXP al_sampSEXP, SEXP x_minSEXP, SEXP x_maxSEXP, SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type al_samp(al_sampSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4ALobj(parms, al_samp, x_min, x_max, q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// kappa4ALcon
NumericVector kappa4ALcon(NumericVector parms, NumericVector al_samp, double x_min, double x_max, NumericVector q1, NumericVector q2);
RcppExport SEXP alR_kappa4ALcon(SEXP parmsSEXP, SEXP al_sampSEXP, SEXP x_minSEXP, SEXP x_maxSEXP, SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type al_samp(al_sampSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4ALcon(parms, al_samp, x_min, x_max, q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// kappa4ALhin
NumericVector kappa4ALhin(NumericVector parms, NumericVector al_samp, double x_min, double x_max, NumericVector q1, NumericVector q2);
RcppExport SEXP alR_kappa4ALhin(SEXP parmsSEXP, SEXP al_sampSEXP, SEXP x_minSEXP, SEXP x_maxSEXP, SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type al_samp(al_sampSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4ALhin(parms, al_samp, x_min, x_max, q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// kappa4ALheq
NumericVector kappa4ALheq(NumericVector parms, NumericVector al_samp, double x_min, double x_max, NumericVector q1, NumericVector q2);
RcppExport SEXP alR_kappa4ALheq(SEXP parmsSEXP, SEXP al_sampSEXP, SEXP x_minSEXP, SEXP x_maxSEXP, SEXP q1SEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parms(parmsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type al_samp(al_sampSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(kappa4ALheq(parms, al_samp, x_min, x_max, q1, q2));
    return rcpp_result_gen;
END_RCPP
}
// dkdeGauss
double dkdeGauss(double x, NumericVector mu, double h);
RcppExport SEXP alR_dkdeGauss(SEXP xSEXP, SEXP muSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(dkdeGauss(x, mu, h));
    return rcpp_result_gen;
END_RCPP
}
// pkdeGauss
double pkdeGauss(double x, NumericVector mu, double h);
RcppExport SEXP alR_pkdeGauss(SEXP xSEXP, SEXP muSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(pkdeGauss(x, mu, h));
    return rcpp_result_gen;
END_RCPP
}
// qkdeGauss
List qkdeGauss(double x, NumericVector mu, double h);
RcppExport SEXP alR_qkdeGauss(SEXP xSEXP, SEXP muSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(qkdeGauss(x, mu, h));
    return rcpp_result_gen;
END_RCPP
}
// kdeGaussInt
List kdeGaussInt(NumericVector mu, double h, double q1, double q2, bool quantile);
RcppExport SEXP alR_kdeGaussInt(SEXP muSEXP, SEXP hSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kdeGaussInt(mu, h, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kdeGaussInt2
NumericVector kdeGaussInt2(NumericVector mu, double h, NumericVector q1, NumericVector q2, bool quantile);
RcppExport SEXP alR_kdeGaussInt2(SEXP muSEXP, SEXP hSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kdeGaussInt2(mu, h, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kdeGaussIntApprox
double kdeGaussIntApprox(NumericVector mu, double h, double q1, double q2, bool quantile);
RcppExport SEXP alR_kdeGaussIntApprox(SEXP muSEXP, SEXP hSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kdeGaussIntApprox(mu, h, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// kdeGaussIntApprox2
NumericVector kdeGaussIntApprox2(NumericVector mu, double h, NumericVector q1, NumericVector q2, bool quantile);
RcppExport SEXP alR_kdeGaussIntApprox2(SEXP muSEXP, SEXP hSEXP, SEXP q1SEXP, SEXP q2SEXP, SEXP quantileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q1(q1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q2(q2SEXP);
    Rcpp::traits::input_parameter< bool >::type quantile(quantileSEXP);
    rcpp_result_gen = Rcpp::wrap(kdeGaussIntApprox2(mu, h, q1, q2, quantile));
    return rcpp_result_gen;
END_RCPP
}
// momKDE
double momKDE(const arma::vec& beta, const arma::mat& gamma, const arma::vec& momy, Function kdeGaussMom, const int& type);
RcppExport SEXP alR_momKDE(SEXP betaSEXP, SEXP gammaSEXP, SEXP momySEXP, SEXP kdeGaussMomSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type momy(momySEXP);
    Rcpp::traits::input_parameter< Function >::type kdeGaussMom(kdeGaussMomSEXP);
    Rcpp::traits::input_parameter< const int& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(momKDE(beta, gamma, momy, kdeGaussMom, type));
    return rcpp_result_gen;
END_RCPP
}
// qlin
double qlin(NumericVector x, NumericVector y, double q);
RcppExport SEXP alR_qlin(SEXP xSEXP, SEXP ySEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(qlin(x, y, q));
    return rcpp_result_gen;
END_RCPP
}
// qsamp
double qsamp(NumericVector x, double q);
RcppExport SEXP alR_qsamp(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(qsamp(x, q));
    return rcpp_result_gen;
END_RCPP
}
// pairSort
List pairSort(NumericVector x);
RcppExport SEXP alR_pairSort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pairSort(x));
    return rcpp_result_gen;
END_RCPP
}
// lulu
NumericVector lulu(NumericVector x);
RcppExport SEXP alR_lulu(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lulu(x));
    return rcpp_result_gen;
END_RCPP
}
